package(default_visibility = ["//visibility:public"])

load("@io_bazel_rules_go//go:def.bzl", "go_binary", "go_library")

config_setting(
    name = "darwin_amd64",
    constraint_values = [
        "@platforms//cpu:x86_64",
        "@platforms//os:osx",
    ],
)

alias(
    name = "packer_host_bin",
    actual = select({
        "//hack:darwin_amd64": "@packer_darwin_amd64_bin//:bin",
        "//conditions:default": "@packer_linux_amd64_bin//:bin",
    }),
)

alias(
    name = "kubectl_host_bin",
    actual = select({
        "//hack:darwin_amd64": "@kubectl_darwin_amd64_bin//file",
        "//conditions:default": "@kubectl_linux_amd64_bin//file",
    }),
)

go_library(
    name = "go_default_library",
    srcs = ["yaml2json.go"],
    importpath = "github.com/freefair/cluster-api-provider-hcloud/hack",
    visibility = ["//visibility:private"],
    deps = ["@com_github_bronze1man_yaml2json//y2jLib:go_default_library"],
)

go_binary(
    name = "hack",
    embed = [":go_default_library"],
    visibility = ["//visibility:public"],
)

GAZELLE = "@bazel_gazelle//cmd/gazelle"

KAZEL = "@io_k8s_repo_infra//cmd/kazel"

GO = "@go_sdk//:bin/go"

GOFMT = "@go_sdk//:bin/gofmt"

CONTROLLER_GEN = "@io_k8s_sigs_controller_tools//cmd/controller-gen"

sh_library(
    name = "lib",
    srcs = glob(["lib/*.sh"]),
)

# Bazel file generation rules
sh_binary(
    name = "update-bazel",
    srcs = ["bazel.sh"],
    args = [
        "update",
        "$(location %s)" % GAZELLE,
        "$(location %s)" % KAZEL,
    ],
    data = [
        ":lib",
        GAZELLE,
        KAZEL,
    ],
)

# sh_test(
#     name = "verify-bazel",
#     srcs = ["bazel.sh"],
#     args = [
#         "verify",
#         "$(location %s)" % GAZELLE,
#         "$(location %s)" % KAZEL,
#     ],
#     data = [
#         ":lib",
#         "@//:all-srcs",
#         GAZELLE,
#         KAZEL,
#     ],
# )

sh_binary(
    name = "update-deps",
    srcs = ["update-deps.sh"],
    args = [
        "$(location %s)" % GO,
        "$(location %s)" % GAZELLE,
        "$(location %s)" % KAZEL,
        "$(location :update-bazel)",
    ],
    data = [
        GAZELLE,
        GO,
        KAZEL,
        ":update-bazel",
    ],
)

# Gofmt rules
sh_binary(
    name = "update-gofmt",
    srcs = ["update-gofmt.sh"],
    args = [
        "$(location %s)" % GOFMT,
    ],
    data = [
        GOFMT,
    ],
)

sh_test(
    name = "verify-gofmt",
    srcs = ["verify-gofmt.sh"],
    args = [
        "$(location %s)" % GOFMT,
    ],
    data = [
        GOFMT,
        "@//:all-srcs",
    ],
)

# CRD code + manifest generation
sh_binary(
    name = "update-crds",
    srcs = ["crds.sh"],
    args = [
        "update",
        "$(location %s)" % GO,
        "$(location %s)" % CONTROLLER_GEN,
    ],
    data = [
        ":lib",
        GO,
        CONTROLLER_GEN,
    ],
)

GHR = "@com_github_tcnksm_ghr//:ghr"

RELEASE_TAR = "//config:release.tar"

sh_binary(
    name = "release",
    srcs = ["release.sh"],
    args = [
        "$(location %s)" % GHR,
        "$(location :release-metadata)",
        "$(location %s)" % RELEASE_TAR,
    ],
    data = [
        GHR,
        ":release-metadata",
        RELEASE_TAR,
    ],
)

IMAGE_DIGEST = "//cmd/cluster-api-provider-hcloud:image.digest"

genrule(
    name = "release-metadata",
    srcs = [
        IMAGE_DIGEST,
    ],
    outs = ["release-metadata.env"],
    cmd = "./$(location release-metadata.sh) \"$(location %s)\" > \"$@\"" % IMAGE_DIGEST,
    stamp = True,
    tools = [
        "release-metadata.sh",
    ],
)

# sh_test(
#     name = "verify-crds",
#     srcs = ["crds.sh"],
#     args = [
#         "verify",
#         "$(location %s)" % GO,
#         "$(location %s)" % CONTROLLER_GEN,
#     ],
#     data = [
#         ":lib",
#         GO,
#         CONTROLLER_GEN,
#         "@//:all-srcs",
#     ],
# )

filegroup(
    name = "package-srcs",
    srcs = glob(["**"]),
    tags = ["automanaged"],
    visibility = ["//visibility:private"],
)

filegroup(
    name = "all-srcs",
    srcs = [
        ":package-srcs",
        "//hack/build:all-srcs",
    ],
    tags = ["automanaged"],
    visibility = ["//visibility:public"],
)
